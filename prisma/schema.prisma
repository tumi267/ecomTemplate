// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enums
enum Currency {
  ZAR
  USD
  EUR
  GBP
}

enum OrderStatus {
  PENDING
  PROCESSING
  PARTIALLY_PROCESSED
  FULFILLED
  CANCELLED
  RETURNED
}

enum CourierStatus {
  NOT_DISPATCHED
  COLLECTION_ASSIGNED
  SHIPPED
  IN_TRANSIT
  DELIVERED
  FAILED_ATTEMPT
  RETURNED_TO_SENDER
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
  PARTIALLY_REFUNDED
}

// Supplier
model Supplier {
  id        String    @id @default(uuid())
  name      String
  email     String?   @unique
  phone     String?
  address   String?
  notes     String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  products  Product[]
}

// Category
model Category {
  id          String    @id @default(uuid())
  name        String?   @unique
  description String?
  imagePath   String?
  products    Product[]
}

// Product
model Product {
  id                     String    @id @default(uuid())
  sku                    String?   @unique
  categoryId             String
  category               Category  @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  name                   String
  description            String
  imagePath              String

  currency               Currency  @default(ZAR)

  isAvailableForPurchase Boolean   @default(true)   // for internal visibility
  availableToPublic      Boolean   @default(true)   // for store visibility
  bestSeller             Boolean   @default(false)
  weekSale               Boolean   @default(false)
  discount               Float     @default(0)

  cost                   Decimal   @default(0)
  price                  Decimal
  qty                    Int
  trackQty               Boolean
  unitsSold              Int       @default(0)

  supplierId             String?
  supplier               Supplier? @relation(fields: [supplierId], references: [id], onDelete: SetNull)

  createdAt              DateTime  @default(now())
  updatedAt              DateTime  @updatedAt

  variants               Variant[]
  sales                  ProductSale[]
}

// Variant
model Variant {
  id          String   @id @default(uuid())
  productId   String
  product     Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  options     Json
  price       Decimal
  qty         Int
  trackQty    Boolean
  unitsSold   Int      @default(0)
  firstListed DateTime @default(now())

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  cartItems   CartItem[]
}

// Track individual product sales (for time-based rate of sale)
model ProductSale {
  id         String   @id @default(uuid())
  productId  String
  product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  variantId  String?
  quantity   Int
  soldAt     DateTime @default(now())
  createdAt  DateTime @default(now())
}

// User
model User {
  id        String   @id @default(uuid())
  email     String   @unique
  name      String?

  addressLine1  String?
  addressLine2  String?
  city          String?
  province      String?
  postalCode    String?
  country       String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  orders    Order[]
  carts     Cart[]
}

// Order
model Order {
  id               String        @id @default(uuid())
  userId           String?
  productJSON      String
  price            Decimal
  status           OrderStatus   @default(PENDING)
  paymentStatus    PaymentStatus @default(PENDING)

  shippingAddressLine1  String?
  shippingAddressLine2  String?
  shippingCity          String?
  shippingProvince      String?
  shippingPostalCode    String?
  shippingCountry       String?

  customerName     String?
  customerEmail    String?
  customerPhone    String?

  paymentMethod    String?
  paymentId        String?
  paidAt           DateTime?

  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  user             User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  CourierTracking  CourierTracking?
}

// Cart
model Cart {
  id        String   @id @default(uuid())
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  items     CartItem[]
}

// CartItem
model CartItem {
  id          String   @id @default(uuid())
  cartId      String
  variantId   String
  quantity    Int      @default(1)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())

  cart        Cart     @relation(fields: [cartId], references: [id], onDelete: Cascade)
  variant     Variant  @relation(fields: [variantId], references: [id], onDelete: Restrict)
}

// CourierTracking
model CourierTracking {
  id               String        @id @default(cuid())
  orderId          String        @unique
  order            Order         @relation(fields: [orderId], references: [id])
  status           CourierStatus
  trackingNumber   String?        @unique
  carrier          String?
  estimatedArrival DateTime?
  updatedAt        DateTime      @updatedAt
  createdAt        DateTime      @default(now())
}

// Hero section for homepage
model Hero {
  id        Int      @id @default(autoincrement())
  imageUrl  String
  altText   String
  position  Int      @unique
  createdAt DateTime @default(now())
}
