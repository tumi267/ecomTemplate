// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema
generator client {
  provider = "prisma-client-js"

}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Use enum for currencies, add more as needed
enum Currency {
  ZAR
  USD
  EUR
  GBP
}

enum OrderStatus {
  PENDING
  PROCESSING
  PARTIALLY_PROCESSED
  FULFILLED
  CANCELLED
  RETURNED
}

enum CourierStatus {
  NOT_DISPATCHED
  SHIPPED
  IN_TRANSIT
  DELIVERED
  FAILED_ATTEMPT
  RETURNED_TO_SENDER
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
  PARTIALLY_REFUNDED
}

model Category {
  id          String    @id @default(uuid())
  name        String
  description String?
  imagePath   String?
  products    Product[]
}

model Product {
  id                     String    @id @default(uuid())
  sku                    String?   @unique  // SKU or barcode for inventory
  categoryId             String
  category               Category  @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  name                   String
  description            String
  imagePath              String

  currency               Currency  @default(ZAR)

  isAvailableForPurchase Boolean   @default(true)
  bestSeller             Boolean   @default(false)
  weekSale               Boolean   @default(false)
  discount               Float     @default(0)

  cost                   Decimal   @default(0)
  price                  Decimal   // base price
  createdAt              DateTime  @default(now())
  updatedAt              DateTime  @updatedAt
  qty                    Int
  trackQty               Boolean
  variants               Variant[]

}

model Variant {
  id          String   @id @default(uuid())
  productId   String
  product     Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  options      Json
  price       Decimal  // can differ from base product price
  qty         Int
  trackQty    Boolean

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  cartItems   CartItem[]
  
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  name      String?

  // Optional user address for shipping
  addressLine1  String?
  addressLine2  String?
  city          String?
  province      String?
  postalCode    String?
  country       String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  orders    Order[]
  carts     Cart[]
}

model Order {
  id         String      @id @default(uuid())
  userId     String?
  productJSON String     // Stores serialized order items
  price      Decimal     // Total order amount
  
  status     OrderStatus @default(PENDING)
  paymentStatus PaymentStatus @default(PENDING)
  
  // Shipping information
  shippingAddressLine1  String?
  shippingAddressLine2  String?
  shippingCity          String?
  shippingProvince      String?
  shippingPostalCode    String?
  shippingCountry       String?
  
  // Customer information
  customerName   String?
  customerEmail  String?
  customerPhone  String?
  
  // Payment metadata (optional but recommended)
  paymentMethod  String?
  paymentId      String?  // Reference from payment processor
  paidAt         DateTime?
  
  // Timestamps
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  
  // Relations
  user       User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  CourierTracking     CourierTracking?
}


// Shopping cart per user
model Cart {
  id        String      @id @default(uuid())
  userId    String
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  items     CartItem[]
}

model CartItem {
  id          String    @id @default(uuid())
  cartId      String
  variantId   String
  quantity    Int       @default(1)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  cart        Cart      @relation(fields: [cartId], references: [id], onDelete: Cascade)
  variant     Variant   @relation(fields: [variantId], references: [id], onDelete: Restrict)
}

model CourierTracking {
  id             String         @id @default(cuid())
  orderId        String         @unique
  order          Order          @relation(fields: [orderId], references: [id])
  status         CourierStatus
  trackingNumber String?
  carrier        String?        // e.g., DHL, Fastway, Aramex
  estimatedArrival DateTime?
  updatedAt      DateTime       @updatedAt
  createdAt      DateTime       @default(now())
}

model Hero {
  id        Int      @id @default(autoincrement())
  imageUrl  String
  altText   String
  position  Int      @unique // position/order of hero on the homepage, e.g. 1, 2, 3
  createdAt DateTime @default(now())
}